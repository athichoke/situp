{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst _c0 = function () {\n  return [7];\n};\nconst _c1 = function () {\n  return [0];\n};\nconst _c2 = function () {\n  return [1, 1, 2];\n};\nconst _c3 = function () {\n  return [0, 1, 0, 1, 2];\n};\nconst _c4 = function () {\n  return [1, 2, 2, 3, 3, 3, 4, 3, 3, 3, 2, 2, 1];\n};\nconst _c5 = function () {\n  return [\":)\", \";(\", \";}\", \":-D\"];\n};\nconst _c6 = function () {\n  return [\";D\", \":-(\", \":-)\", \";~)\"];\n};\nconst _c7 = function () {\n  return [\";]\", \":[\", \";*\", \":$\", \";-D\"];\n};\nexport class AppComponent {\n  shuffle(word) {\n    if (word.length === 1) {\n      return [word];\n    }\n    const split = word.split('');\n    let result = [];\n    return split;\n  }\n  findOdd(arr) {\n    let counter = 0;\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0; j < arr.length; j++) {\n        if (arr[i] === arr[j]) {\n          counter++;\n        }\n      }\n      if (counter < 2) {\n        return arr[i];\n      } else {\n        counter = 0;\n      }\n    }\n    return 'none';\n  }\n  countSmileys(arr) {\n    let counter = 0;\n    const pattern = /[:;][-~]?[)D]/;\n    for (let i = 0; i < arr.length; i++) {\n      if (pattern.test(arr[i])) {\n        counter++;\n      }\n    }\n    return counter;\n  }\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 51,\n    vars: 19,\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h4\");\n        i0.ɵɵtext(1, \"Shuffling\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3, \" Q#1: [a,b]\");\n        i0.ɵɵelement(4, \"br\");\n        i0.ɵɵtext(5);\n        i0.ɵɵelement(6, \"br\");\n        i0.ɵɵtext(7, \" Q#2: [a,b,c]\");\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9);\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵtext(11, \" Q#3: [a,b,a,b]\");\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵtext(13);\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(15, \"h4\");\n        i0.ɵɵtext(16, \"Find the Odd int\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"p\");\n        i0.ɵɵtext(18, \" Q#1: [7]\");\n        i0.ɵɵelement(19, \"br\");\n        i0.ɵɵtext(20);\n        i0.ɵɵelement(21, \"br\");\n        i0.ɵɵtext(22, \" Q#2: [0]\");\n        i0.ɵɵelement(23, \"br\");\n        i0.ɵɵtext(24);\n        i0.ɵɵelement(25, \"br\");\n        i0.ɵɵtext(26, \" Q#3: [1,1,2]\");\n        i0.ɵɵelement(27, \"br\");\n        i0.ɵɵtext(28);\n        i0.ɵɵelement(29, \"br\");\n        i0.ɵɵtext(30, \" Q#4: [0,1,0,1,2]\");\n        i0.ɵɵelement(31, \"br\");\n        i0.ɵɵtext(32);\n        i0.ɵɵelement(33, \"br\");\n        i0.ɵɵtext(34, \" Q#5: [1,2,2,3,3,3,4,3,3,3,2,2,1]\");\n        i0.ɵɵelement(35, \"br\");\n        i0.ɵɵtext(36);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(37, \"h4\");\n        i0.ɵɵtext(38, \"Count the smiley faces\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(39, \"p\");\n        i0.ɵɵtext(40, \" Q#1: [':)', ';(', ';}', ':-D']\");\n        i0.ɵɵelement(41, \"br\");\n        i0.ɵɵtext(42);\n        i0.ɵɵelement(43, \"br\");\n        i0.ɵɵtext(44, \" Q#2: [';D', ':-(', ':-)', ';~)']\");\n        i0.ɵɵelement(45, \"br\");\n        i0.ɵɵtext(46);\n        i0.ɵɵelement(47, \"br\");\n        i0.ɵɵtext(48, \" Q#3: [';]', ':[', ';*', ':$', ';-D']\");\n        i0.ɵɵelement(49, \"br\");\n        i0.ɵɵtext(50);\n        i0.ɵɵelementEnd();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" A#1: \", ctx.shuffle(\"ab\"), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#2: \", ctx.shuffle(\"abc\"), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#3: \", ctx.shuffle(\"aabb\"), \"\");\n        i0.ɵɵadvance(7);\n        i0.ɵɵtextInterpolate1(\" A#1: \", ctx.findOdd(i0.ɵɵpureFunction0(11, _c0)), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#2: \", ctx.findOdd(i0.ɵɵpureFunction0(12, _c1)), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#3: \", ctx.findOdd(i0.ɵɵpureFunction0(13, _c2)), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#4: \", ctx.findOdd(i0.ɵɵpureFunction0(14, _c3)), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#5: \", ctx.findOdd(i0.ɵɵpureFunction0(15, _c4)), \"\\n\");\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate1(\" A#1: \", ctx.countSmileys(i0.ɵɵpureFunction0(16, _c5)), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#2: \", ctx.countSmileys(i0.ɵɵpureFunction0(17, _c6)), \"\");\n        i0.ɵɵadvance(4);\n        i0.ɵɵtextInterpolate1(\" A#3: \", ctx.countSmileys(i0.ɵɵpureFunction0(18, _c7)), \"\\n\");\n      }\n    },\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["AppComponent","shuffle","word","length","split","result","findOdd","arr","counter","i","j","countSmileys","pattern","test","_","_2","selectors","decls","vars","template","AppComponent_Template","rf","ctx","i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵelement","ɵɵadvance","ɵɵtextInterpolate1","ɵɵpureFunction0","_c0","_c1","_c2","_c3","_c4","_c5","_c6","_c7"],"sources":["/Users/athichoke/Work/coding/situp/src/app/app.component.ts","/Users/athichoke/Work/coding/situp/src/app/app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\n  shuffle(word: string) {\n    if(word.length === 1) {\n      return [word];\n    }\n    const split = word.split('');\n    let result: string[] = [];\n    return split;\n  }\n\n  findOdd(arr: number[]) {\n    let counter = 0;\n    for(let i = 0; i < arr.length; i++) {\n      for(let j = 0; j < arr.length; j++) {\n        if(arr[i] === arr[j]) {\n          counter++;\n        }\n      }\n      if(counter < 2) {\n        return arr[i];\n      } else {\n        counter = 0;\n      }\n    }\n    return 'none';\n  }\n\n  countSmileys(arr: string[]): number {\n    let counter = 0;\n    const pattern = /[:;][-~]?[)D]/;\n    for(let i = 0; i < arr.length; i++) {\n      if(pattern.test(arr[i])) {\n        counter++;\n      }\n    }\n    return counter;\n  }\n\n}\n","<h4>Shuffling</h4>\n<p>\n  Q#1: [a,b]<br>\n  A#1: {{ shuffle('ab') }}<br>\n  Q#2: [a,b,c]<br>\n  A#2: {{ shuffle('abc') }}<br>\n  Q#3: [a,b,a,b]<br>\n  A#3: {{ shuffle('aabb') }}<br>\n</p>\n<h4>Find the Odd int</h4>\n<p>\n  Q#1: [7]<br>\n  A#1: {{ findOdd([7]) }}<br>\n  Q#2: [0]<br>\n  A#2: {{ findOdd([0]) }}<br>\n  Q#3: [1,1,2]<br>\n  A#3: {{ findOdd([1,1,2]) }}<br>\n  Q#4: [0,1,0,1,2]<br>\n  A#4: {{ findOdd([0,1,0,1,2]) }}<br>\n  Q#5: [1,2,2,3,3,3,4,3,3,3,2,2,1]<br>\n  A#5: {{ findOdd([1,2,2,3,3,3,4,3,3,3,2,2,1]) }}\n</p>\n<h4>Count the smiley faces</h4>\n<p>\n  Q#1: [':)', ';(', ';}', ':-D']<br>\n  A#1: {{ countSmileys([':)', ';(', ';}', ':-D']) }}<br>\n  Q#2: [';D', ':-(', ':-)', ';~)']<br>\n  A#2: {{ countSmileys([';D', ':-(', ':-)', ';~)']) }}<br>\n  Q#3: [';]', ':[', ';*', ':$', ';-D']<br>\n  A#3: {{ countSmileys([';]', ':[', ';*', ':$', ';-D']) }}\n</p>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}