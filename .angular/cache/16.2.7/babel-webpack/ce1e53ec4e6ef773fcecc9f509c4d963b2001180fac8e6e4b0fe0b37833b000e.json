{"ast":null,"code":"import * as i0 from \"@angular/core\";\nconst _c0 = function () {\n  return [7];\n};\nconst _c1 = function () {\n  return [0];\n};\nconst _c2 = function () {\n  return [1, 1, 2];\n};\nconst _c3 = function () {\n  return [0, 1, 0, 1, 2];\n};\nconst _c4 = function () {\n  return [1, 2, 2, 3, 3, 3, 4, 3, 3, 3, 2, 2, 1];\n};\nconst _c5 = function () {\n  return [\":)\", \";(\", \";}\", \":-D\"];\n};\nconst _c6 = function () {\n  return [\";D\", \":-(\", \":-)\", \";~)\"];\n};\nconst _c7 = function () {\n  return [\";]\", \":[\", \";*\", \":$\", \";-D\"];\n};\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    shuffle(input) {\n      const results = [];\n      const uniqueResults = [];\n      function permute(arr, index) {\n        if (index === arr.length) {\n          results.push(arr.join(''));\n          return;\n        }\n        for (let i = index; i < arr.length; i++) {\n          [arr[index], arr[i]] = [arr[i], arr[index]]; // Swap elements\n          permute(arr, index + 1);\n          [arr[index], arr[i]] = [arr[i], arr[index]]; // Restore original order\n        }\n      }\n\n      const inputArray = input.split('');\n      permute(inputArray, 0);\n      for (let i = 0; i < results.length; i++) {\n        if (uniqueResults.indexOf(results[i]) === -1) {\n          uniqueResults.push(results[i]);\n        }\n      }\n      return uniqueResults;\n    }\n    findOdd(arr) {\n      let counter = 0;\n      for (let i = 0; i < arr.length; i++) {\n        for (let j = 0; j < arr.length; j++) {\n          if (arr[i] === arr[j]) {\n            counter++;\n          }\n        }\n        if (counter < 2) {\n          return arr[i];\n        } else {\n          counter = 0;\n        }\n      }\n      return 'none';\n    }\n    countSmileys(arr) {\n      let counter = 0;\n      const pattern = /[:;][-~]?[)D]/;\n      for (let i = 0; i < arr.length; i++) {\n        if (pattern.test(arr[i])) {\n          counter++;\n        }\n      }\n      return counter;\n    }\n    static #_ = this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)();\n    };\n    static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 55,\n      vars: 20,\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"h4\");\n          i0.ɵɵtext(1, \"Shuffling\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(2, \"p\");\n          i0.ɵɵtext(3, \" Q#1: 'a'\");\n          i0.ɵɵelement(4, \"br\");\n          i0.ɵɵtext(5);\n          i0.ɵɵelement(6, \"br\");\n          i0.ɵɵtext(7, \" Q#2: 'ab'\");\n          i0.ɵɵelement(8, \"br\");\n          i0.ɵɵtext(9);\n          i0.ɵɵelement(10, \"br\");\n          i0.ɵɵtext(11, \" Q#3: 'abc'\");\n          i0.ɵɵelement(12, \"br\");\n          i0.ɵɵtext(13);\n          i0.ɵɵelement(14, \"br\");\n          i0.ɵɵtext(15, \" Q#4: 'aabb'\");\n          i0.ɵɵelement(16, \"br\");\n          i0.ɵɵtext(17);\n          i0.ɵɵelement(18, \"br\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(19, \"h4\");\n          i0.ɵɵtext(20, \"Find the Odd int\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(21, \"p\");\n          i0.ɵɵtext(22, \" Q#1: [7]\");\n          i0.ɵɵelement(23, \"br\");\n          i0.ɵɵtext(24);\n          i0.ɵɵelement(25, \"br\");\n          i0.ɵɵtext(26, \" Q#2: [0]\");\n          i0.ɵɵelement(27, \"br\");\n          i0.ɵɵtext(28);\n          i0.ɵɵelement(29, \"br\");\n          i0.ɵɵtext(30, \" Q#3: [1,1,2]\");\n          i0.ɵɵelement(31, \"br\");\n          i0.ɵɵtext(32);\n          i0.ɵɵelement(33, \"br\");\n          i0.ɵɵtext(34, \" Q#4: [0,1,0,1,2]\");\n          i0.ɵɵelement(35, \"br\");\n          i0.ɵɵtext(36);\n          i0.ɵɵelement(37, \"br\");\n          i0.ɵɵtext(38, \" Q#5: [1,2,2,3,3,3,4,3,3,3,2,2,1]\");\n          i0.ɵɵelement(39, \"br\");\n          i0.ɵɵtext(40);\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(41, \"h4\");\n          i0.ɵɵtext(42, \"Count the smiley faces\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(43, \"p\");\n          i0.ɵɵtext(44, \" Q#1: [':)', ';(', ';}', ':-D']\");\n          i0.ɵɵelement(45, \"br\");\n          i0.ɵɵtext(46);\n          i0.ɵɵelement(47, \"br\");\n          i0.ɵɵtext(48, \" Q#2: [';D', ':-(', ':-)', ';~)']\");\n          i0.ɵɵelement(49, \"br\");\n          i0.ɵɵtext(50);\n          i0.ɵɵelement(51, \"br\");\n          i0.ɵɵtext(52, \" Q#3: [';]', ':[', ';*', ':$', ';-D']\");\n          i0.ɵɵelement(53, \"br\");\n          i0.ɵɵtext(54);\n          i0.ɵɵelementEnd();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(5);\n          i0.ɵɵtextInterpolate1(\" A#1: \", ctx.shuffle(\"a\"), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#2: \", ctx.shuffle(\"ab\"), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#3: \", ctx.shuffle(\"abc\"), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#4: \", ctx.shuffle(\"aabb\"), \"\");\n          i0.ɵɵadvance(7);\n          i0.ɵɵtextInterpolate1(\" A#1: \", ctx.findOdd(i0.ɵɵpureFunction0(12, _c0)), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#2: \", ctx.findOdd(i0.ɵɵpureFunction0(13, _c1)), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#3: \", ctx.findOdd(i0.ɵɵpureFunction0(14, _c2)), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#4: \", ctx.findOdd(i0.ɵɵpureFunction0(15, _c3)), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#5: \", ctx.findOdd(i0.ɵɵpureFunction0(16, _c4)), \"\\n\");\n          i0.ɵɵadvance(6);\n          i0.ɵɵtextInterpolate1(\" A#1: \", ctx.countSmileys(i0.ɵɵpureFunction0(17, _c5)), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#2: \", ctx.countSmileys(i0.ɵɵpureFunction0(18, _c6)), \"\");\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\" A#3: \", ctx.countSmileys(i0.ɵɵpureFunction0(19, _c7)), \"\\n\");\n        }\n      }\n    });\n  }\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}